import type { GenericNode, GenericParent } from './types.js';
/**
 * Determine if node with `identifier` should be considered a target
 *
 * TODO: `identifier` on these non-target should be updated to `target`
 * Doing so will make this function obsolete
 *
 * This function only returns false if node `type` equals one of:
 * crossReferences, citations, footnoteDefinition, footnoteReference, captionNumber.
 *
 * It does not actually check if the node has `identifier`.
 */
export declare function isTargetIdentifierNode(node: {
    type: string;
}): boolean;
/**
 * Select target node, given identifier and mdast
 *
 * If identifier resolves to "heading" node, this will return the heading node and all
 * subsequent nodes up to the next heading, unless `maxNodes` is specified - then
 * it will only return up to that many nodes.
 *
 * If identifier resolves to "definitionTerm" node, this will return a single
 * "definitionList" node that wraps the "definitionTerm" node and any
 * subsequent "definitionDescription" node(s). The `maxNodes` value will still
 * apply here if specified.
 *
 * For all other target node types, this will only return the single target node.
 */
export declare function selectMdastNodes(mdast: GenericParent, identifier: string, maxNodes?: number): {
    htmlId?: string;
    nodes: GenericNode[];
};
//# sourceMappingURL=selectNodes.d.ts.map