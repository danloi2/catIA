import { fileError } from 'myst-common';
import { addCommonDirectiveOptions, commonDirectiveOptions } from './utils.js';
const CONTEXTS = ['project', 'page', 'section'];
export const tocDirective = {
    name: 'toc',
    doc: 'Inserts table of contents in the page. This may be for the project (each page has an entry), the current page (each heading has an entry), or the current section (only headings in the section have an entry).',
    alias: ['tableofcontents', 'table-of-contents', 'toctree', 'contents'],
    arg: {
        type: 'myst',
        doc: 'Heading to be included with table of contents',
    },
    options: {
        context: {
            type: String,
            doc: 'Table of Contents context; one of project, page, or section',
            alias: ['kind'],
        },
        depth: {
            type: Number,
            doc: 'Number of levels to include in Table of Contents; by default, all levels will be included',
            alias: ['maxdepth'],
        },
        ...commonDirectiveOptions('toc'),
    },
    run(data, vfile) {
        var _a, _b, _c;
        let context = ((_a = data.options) === null || _a === void 0 ? void 0 : _a.context)
            ? data.options.context
            : data.name === 'contents'
                ? 'section'
                : 'project';
        if (!CONTEXTS.includes(context)) {
            fileError(vfile, `Unknown context for ${data.name} directive: ${context}`);
            context = 'project';
        }
        let depth = (_b = data.options) === null || _b === void 0 ? void 0 : _b.depth;
        if (depth != null && depth < 1) {
            fileError(vfile, `Table of Contents 'depth' must be a number greater than 0`);
            depth = undefined;
        }
        const children = [];
        if (data.arg) {
            const parsedArg = data.arg;
            if (((_c = parsedArg[0]) === null || _c === void 0 ? void 0 : _c.type) === 'heading') {
                children.push(...parsedArg);
            }
            else {
                children.push({
                    type: 'heading',
                    depth: 2,
                    enumerated: false,
                    children: parsedArg,
                });
            }
        }
        const toc = { type: 'toc', kind: context, depth, children };
        addCommonDirectiveOptions(data, toc);
        return [toc];
    },
};
