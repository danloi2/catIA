import { type DirectiveData, type DirectiveSpec, type GenericNode } from 'myst-common';
export declare function classDirectiveOption(nodeType?: string): {
    class: {
        type: StringConstructor;
        doc: string;
    };
};
export declare function labelDirectiveOption(nodeType?: string): {
    label: {
        type: StringConstructor;
        alias: string[];
        doc: string;
    };
};
export declare function enumerationDirectiveOptions(nodeType?: string): Required<DirectiveSpec>['options'];
/**
 * Adds `class`, `label`, `enumerated`, and `enumerator`.
 */
export declare function commonDirectiveOptions(nodeType?: string): Required<DirectiveSpec>['options'];
export declare function addClassOptions(data: DirectiveData, node: GenericNode): GenericNode;
export declare function addLabelOptions(data: DirectiveData, node: GenericNode): GenericNode;
export declare function addEnumerationOptions(data: DirectiveData, node: GenericNode): GenericNode;
export declare function addCommonDirectiveOptions(data: DirectiveData, node: GenericNode): GenericNode;
//# sourceMappingURL=utils.d.ts.map