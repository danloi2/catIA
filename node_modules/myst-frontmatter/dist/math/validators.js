import { defined, incrementOptions, validateObject, validateObjectKeys, validateString, } from 'simple-validators';
export function validateMathMacro(input, opts) {
    if (typeof input === 'string') {
        input = { macro: input };
    }
    const value = validateObjectKeys(input, { required: ['macro'], optional: ['title', 'description'] }, opts);
    if (!value)
        return;
    const macro = validateString(value.macro, incrementOptions('macro', opts));
    if (!macro)
        return;
    const output = { macro };
    if (defined(value.title)) {
        output.title = validateString(value.title, incrementOptions('title', opts));
    }
    if (defined(value.description)) {
        output.description = validateString(value.description, incrementOptions('description', opts));
    }
    return output;
}
export function validateMathMacroObject(input, opts) {
    const value = validateObject(input, opts);
    if (!value)
        return;
    const validMacros = Object.entries(value)
        .map(([key, val]) => {
        const macro = validateMathMacro(val, incrementOptions(key, opts));
        if (!macro)
            return false;
        return [key, macro];
    })
        .filter((valid) => !!valid);
    return Object.fromEntries(validMacros);
}
