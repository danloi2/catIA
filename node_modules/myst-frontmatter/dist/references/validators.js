import { defined, incrementOptions, validateObject, validateObjectKeys, validateString, validateUrl, validationWarning, } from 'simple-validators';
import { KNOWN_REFERENCE_KINDS } from './types.js';
function validateExternalReference(input, opts) {
    var _a;
    if (typeof input === 'string') {
        input = { url: input };
    }
    const value = validateObjectKeys(input, { required: ['url'], optional: ['kind'] }, opts);
    if (!value)
        return undefined;
    let url = validateUrl(value.url, incrementOptions('url', opts));
    if (!url)
        return undefined;
    if (url.endsWith('/')) {
        url = url.slice(0, url.length - 1);
    }
    const output = { url };
    if (defined(value.kind)) {
        const kindOpts = incrementOptions(value.kind, opts);
        let kind = (_a = validateString(value.kind, kindOpts)) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        if (kind === 'sphinx' || kind === 'inv')
            kind = 'intersphinx';
        if (kind && !KNOWN_REFERENCE_KINDS.includes(kind)) {
            validationWarning(`Unknown external reference kind "${kind}"`, kindOpts);
        }
        if (kind)
            output.kind = kind;
    }
    return output;
}
export function validateExternalReferences(input, opts) {
    const value = validateObject(input, opts);
    if (!value)
        return undefined;
    const output = Object.fromEntries(Object.entries(value)
        .map(([key, ref]) => {
        const outputKey = validateString(key, { ...opts, regex: '^[a-zA-Z0-9_-]*$' });
        if (!outputKey)
            return undefined;
        const outputRef = validateExternalReference(ref, incrementOptions(key, opts));
        if (!outputRef)
            return undefined;
        return [outputKey, outputRef];
    })
        .filter((exists) => !!exists));
    return Object.keys(output).length ? output : undefined;
}
