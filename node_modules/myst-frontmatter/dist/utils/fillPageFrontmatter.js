import { fillMissingKeys, incrementOptions, validationWarning } from 'simple-validators';
import { fillNumbering } from '../numbering/validators.js';
import { USE_PROJECT_FALLBACK } from '../page/validators.js';
import { normalizeJsonToString } from './normalizeString.js';
import { isStashPlaceholder, stashPlaceholder } from './referenceStash.js';
/**
 * Fill missing values from page frontmatter object with values from project frontmatter
 *
 * This only applies to frontmatter values where overriding is the correct behavior.
 * For example, if page has no 'title' the project 'title' is not filled in.
 */
export function fillPageFrontmatter(pageFrontmatter, projectFrontmatter, opts) {
    return fillProjectFrontmatter(pageFrontmatter, projectFrontmatter, opts, USE_PROJECT_FALLBACK, true);
}
export function fillSiteFrontmatter(base, filler, opts, keys, trimUnused) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
    const frontmatter = fillMissingKeys(base, filler, keys !== null && keys !== void 0 ? keys : Object.keys(filler));
    // Combine all options defined on page and project
    if (filler.options || base.options) {
        frontmatter.options = {
            ...((_a = filler.options) !== null && _a !== void 0 ? _a : {}),
            ...((_b = base.options) !== null && _b !== void 0 ? _b : {}),
        };
    }
    // Gather all contributor and affiliation ids from funding sources
    const contributorIds = new Set();
    const affiliationIds = new Set();
    (_c = frontmatter.funding) === null || _c === void 0 ? void 0 : _c.forEach((fund) => {
        var _a;
        (_a = fund.awards) === null || _a === void 0 ? void 0 : _a.forEach((award) => {
            var _a, _b, _c;
            (_a = award.investigators) === null || _a === void 0 ? void 0 : _a.forEach((inv) => {
                contributorIds.add(inv);
            });
            (_b = award.recipients) === null || _b === void 0 ? void 0 : _b.forEach((rec) => {
                contributorIds.add(rec);
            });
            (_c = award.sources) === null || _c === void 0 ? void 0 : _c.forEach((aff) => {
                affiliationIds.add(aff);
            });
        });
    });
    // Gather all contributor ids from reviewers and editors
    (_d = frontmatter.reviewers) === null || _d === void 0 ? void 0 : _d.forEach((reviewer) => {
        contributorIds.add(reviewer);
    });
    (_e = frontmatter.editors) === null || _e === void 0 ? void 0 : _e.forEach((editor) => {
        contributorIds.add(editor);
    });
    if (!trimUnused) {
        [
            ...((_f = base.authors) !== null && _f !== void 0 ? _f : []),
            ...((_g = filler.authors) !== null && _g !== void 0 ? _g : []),
            ...((_h = base.contributors) !== null && _h !== void 0 ? _h : []),
            ...((_j = filler.contributors) !== null && _j !== void 0 ? _j : []),
        ].forEach((auth) => {
            if (auth.id)
                contributorIds.add(auth.id);
        });
        [...((_k = base.affiliations) !== null && _k !== void 0 ? _k : []), ...((_l = filler.affiliations) !== null && _l !== void 0 ? _l : [])].forEach((aff) => {
            if (aff.id)
                affiliationIds.add(aff.id);
        });
        if (filler.tags || base.tags) {
            frontmatter.tags = [...new Set([...((_m = filler.tags) !== null && _m !== void 0 ? _m : []), ...((_o = base.tags) !== null && _o !== void 0 ? _o : [])])];
        }
        if (filler.reviewers || base.reviewers) {
            frontmatter.reviewers = [
                ...new Set([...((_p = filler.reviewers) !== null && _p !== void 0 ? _p : []), ...((_q = base.reviewers) !== null && _q !== void 0 ? _q : [])]),
            ];
        }
        if (filler.editors || base.editors) {
            frontmatter.editors = [...new Set([...((_r = filler.editors) !== null && _r !== void 0 ? _r : []), ...((_s = base.editors) !== null && _s !== void 0 ? _s : [])])];
        }
        if (filler.keywords || base.keywords) {
            frontmatter.keywords = [...new Set([...((_t = filler.keywords) !== null && _t !== void 0 ? _t : []), ...((_u = base.keywords) !== null && _u !== void 0 ? _u : [])])];
        }
        if (filler.funding || base.funding) {
            // This does nothing to deduplicate repeated awards
            frontmatter.funding = [...((_v = filler.funding) !== null && _v !== void 0 ? _v : []), ...((_w = base.funding) !== null && _w !== void 0 ? _w : [])];
        }
    }
    if (((_x = frontmatter.authors) === null || _x === void 0 ? void 0 : _x.length) || contributorIds.size) {
        // Gather all people from page/project authors/contributors
        const people = [
            ...((_y = base.authors) !== null && _y !== void 0 ? _y : []),
            ...((_z = filler.authors) !== null && _z !== void 0 ? _z : []),
            ...((_0 = base.contributors) !== null && _0 !== void 0 ? _0 : []),
            ...((_1 = filler.contributors) !== null && _1 !== void 0 ? _1 : []),
        ];
        const peopleLookup = {};
        people.forEach((auth) => {
            if (!auth.id || isStashPlaceholder(auth))
                return;
            if (!peopleLookup[auth.id]) {
                peopleLookup[auth.id] = auth;
            }
            else if (normalizeJsonToString(auth) !== normalizeJsonToString(peopleLookup[auth.id])) {
                validationWarning(`Duplicate contributor id within project: ${auth.id}`, incrementOptions('authors', opts));
            }
        });
        if ((_2 = frontmatter.authors) === null || _2 === void 0 ? void 0 : _2.length) {
            frontmatter.authors = frontmatter.authors.map((auth) => {
                var _a;
                if (!auth.id)
                    return auth;
                // If contributors are in final author list, do not add to contributor list
                contributorIds.delete(auth.id);
                return (_a = peopleLookup[auth.id]) !== null && _a !== void 0 ? _a : stashPlaceholder(auth.id);
            });
        }
        if (contributorIds.size) {
            frontmatter.contributors = [...contributorIds].map((id) => {
                var _a;
                return (_a = peopleLookup[id]) !== null && _a !== void 0 ? _a : stashPlaceholder(id);
            });
        }
    }
    // Add affiliations from reconstructed author/contributor lists and explicit page affiliations
    [...((_3 = frontmatter.authors) !== null && _3 !== void 0 ? _3 : []), ...((_4 = frontmatter.contributors) !== null && _4 !== void 0 ? _4 : [])].forEach((auth) => {
        var _a;
        (_a = auth.affiliations) === null || _a === void 0 ? void 0 : _a.forEach((aff) => {
            affiliationIds.add(aff);
        });
    });
    (_5 = frontmatter.affiliations) === null || _5 === void 0 ? void 0 : _5.forEach((aff) => {
        if (aff.id)
            affiliationIds.add(aff.id);
    });
    if (affiliationIds.size) {
        const affiliations = [...((_6 = base.affiliations) !== null && _6 !== void 0 ? _6 : []), ...((_7 = filler.affiliations) !== null && _7 !== void 0 ? _7 : [])];
        const affiliationLookup = {};
        affiliations.forEach((aff) => {
            if (!aff.id || isStashPlaceholder(aff))
                return;
            if (!affiliationLookup[aff.id]) {
                affiliationLookup[aff.id] = aff;
            }
            else if (normalizeJsonToString(aff) !== normalizeJsonToString(affiliationLookup[aff.id])) {
                validationWarning(`Duplicate affiliation id within project: ${aff.id}`, incrementOptions('affiliations', opts));
            }
        });
        frontmatter.affiliations = [...affiliationIds].map((id) => {
            var _a;
            return (_a = affiliationLookup[id]) !== null && _a !== void 0 ? _a : stashPlaceholder(id);
        });
    }
    return frontmatter;
}
export function fillProjectFrontmatter(base, filler, opts, keys, trimUnused) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
    const frontmatter = fillSiteFrontmatter(base, filler, opts, keys !== null && keys !== void 0 ? keys : Object.keys(filler), trimUnused);
    if (filler.numbering || base.numbering) {
        frontmatter.numbering = fillNumbering(base.numbering, filler.numbering);
    }
    // Combine all math macros defined on page and project
    if (filler.math || base.math) {
        frontmatter.math = { ...((_a = filler.math) !== null && _a !== void 0 ? _a : {}), ...((_b = base.math) !== null && _b !== void 0 ? _b : {}) };
    }
    // Combine all abbreviation defined on page and project
    if (filler.abbreviations || base.abbreviations) {
        frontmatter.abbreviations = {
            ...((_c = filler.abbreviations) !== null && _c !== void 0 ? _c : {}),
            ...((_d = base.abbreviations) !== null && _d !== void 0 ? _d : {}),
        };
    }
    // Combine all settings defined on page and project
    if (filler.settings || base.settings) {
        frontmatter.settings = {
            ...((_e = filler.settings) !== null && _e !== void 0 ? _e : {}),
            ...((_f = base.settings) !== null && _f !== void 0 ? _f : {}),
        };
    }
    if (filler.identifiers || base.identifiers) {
        frontmatter.identifiers = {
            ...((_g = filler.identifiers) !== null && _g !== void 0 ? _g : {}),
            ...((_h = base.identifiers) !== null && _h !== void 0 ? _h : {}),
        };
    }
    if (!trimUnused) {
        if (filler.bibliography || base.bibliography) {
            frontmatter.bibliography = [
                ...new Set([...((_j = filler.bibliography) !== null && _j !== void 0 ? _j : []), ...((_k = base.bibliography) !== null && _k !== void 0 ? _k : [])]),
            ];
        }
        if (filler.requirements || base.requirements) {
            frontmatter.requirements = [
                ...new Set([...((_l = filler.requirements) !== null && _l !== void 0 ? _l : []), ...((_m = base.requirements) !== null && _m !== void 0 ? _m : [])]),
            ];
        }
        if (filler.resources || base.resources) {
            frontmatter.resources = [
                ...new Set([...((_o = filler.resources) !== null && _o !== void 0 ? _o : []), ...((_p = base.resources) !== null && _p !== void 0 ? _p : [])]),
            ];
        }
        if (filler.exports || base.exports) {
            frontmatter.exports = [];
            const ids = (_r = (_q = base.exports) === null || _q === void 0 ? void 0 : _q.map(({ id }) => id)) !== null && _r !== void 0 ? _r : [];
            (_s = filler.exports) === null || _s === void 0 ? void 0 : _s.forEach((exp) => {
                var _a;
                if (!exp.id || !ids.includes(exp.id)) {
                    (_a = frontmatter.exports) === null || _a === void 0 ? void 0 : _a.push(exp);
                }
            });
            (_t = frontmatter.exports) === null || _t === void 0 ? void 0 : _t.push(...((_u = base.exports) !== null && _u !== void 0 ? _u : []));
        }
        if (filler.downloads || base.downloads) {
            frontmatter.downloads = [];
            const ids = (_w = (_v = base.downloads) === null || _v === void 0 ? void 0 : _v.map(({ id }) => id).filter(Boolean)) !== null && _w !== void 0 ? _w : [];
            const urls = (_y = (_x = base.downloads) === null || _x === void 0 ? void 0 : _x.map(({ url }) => url).filter(Boolean)) !== null && _y !== void 0 ? _y : [];
            (_z = filler.downloads) === null || _z === void 0 ? void 0 : _z.forEach((download) => {
                var _a, _b;
                if (download.id && !ids.includes(download.id)) {
                    (_a = frontmatter.downloads) === null || _a === void 0 ? void 0 : _a.push(download);
                }
                if (download.url && !urls.includes(download.url)) {
                    (_b = frontmatter.downloads) === null || _b === void 0 ? void 0 : _b.push(download);
                }
            });
            (_0 = frontmatter.downloads) === null || _0 === void 0 ? void 0 : _0.push(...((_1 = base.downloads) !== null && _1 !== void 0 ? _1 : []));
        }
    }
    return frontmatter;
}
